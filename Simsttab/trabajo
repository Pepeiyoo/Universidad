Este trabajo está realizado por Jose carrasco Haro y Jaime Jose Romero Molina.

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   Simsttab -- Simplistic school time tabler
   Copyright (C) 2005-2022 Markus Triska triska@metalevel.at
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
   For more information about this program, visit:
          https://www.metalevel.at/simsttab/
          ==================================
   Tested with Scryer Prolog.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


:- use_module(library(clpz)).   %Consiste en cargar los archivos especificados. Todos deben ser tipo modulo, todo los predicados exportados de los archivos cargados, se importan al modulo desde el que se llama a este predicado.
:- use_module(library(dcgs)).
:- use_module(library(reif)).
:- use_module(library(pairs)).
:- use_module(library(lists)).
:- use_module(library(format)).
:- use_module(library(pio)).

:- dynamic(class_subject_teacher_times/4).  %la función dynamic informa al interprete de que la definición del predicado o predicados puede cambiar durante la ejecución
:- dynamic(coupling/4).
:- dynamic(teacher_freeday/2).
:- dynamic(slots_per_day/1).
:- dynamic(slots_per_week/1).
:- dynamic(class_freeslot/2).
:- dynamic(room_alloc/4).

:- discontiguous(class_subject_teacher_times/4).  %discontiguous informa al sistema de que las clausulas de los predicados especificados prodian no estar juntas en el archivo fuente
:- discontiguous(class_freeslot/2).


/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
			 Posting constraints
  La estructura de datos más importante en este CSP son los pares de la forma
      Req-Vs
   donde Req es un término de la forma req(C,S,T,N) (véase más adelante), y Vs es
   una lista de longitud N. Los elementos de Vs son variables de dominio finito
   que denotan las horas de las lecciones programadas de Req. 
   llamamos a esta lista de pares Req-Vs los requisitos.
   Para romper la simetría, los elementos de Vs se limitan a ser
   estrictamente ascendentes.
   Además, las franjas horarias de cada profesor se limitan a ser
   todo_diferente/1, que seria la fucnión all_different.
   Para cada requisito, las franjas horarias divididas por franjas_por_día (slots_per_day)
   se restringen para que sean estrictamente ascendentes para hacer que los días sean distintos,
   excepto en el caso de las clases acopladas.
   Las franjas horarias de cada clase, y de las lecciones que ocupan la misma
   sala, se limitan a ser todo_diferente/1.
   El etiquetado se realiza en todas las variables de las franjas horarias.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


requirements(Rs) :-															
        Goal = class_subject_teacher_times(Class,Subject,Teacher,Number),	%La meta es = clase C  que debe tener la asignatura Subj por el profesor Teacher exactamente N veces por semana
        setof(req(Class,Subject,Teacher,Number), Goal, Rs0), %El setof es el equivalente de bagof pero ordena el resultado con la función sort para lista ordenada de alternativas sin duplicado.
		% Y el bagof Unifica Rs0 con las alternativas de req. Si Goal tiene variables libres además de la que comparte con req, bagof/3 retrocederá sobre las alternativas de estas variables libres, unificando Rs0 con las correspondientes alternativas de req.
        maplist(req_with_slots, Rs0, Rs). %maplist sera verdadero si req_with_slot se aplica con exito en todos los elementos coincidentes de las lista Rs0 y se guarda en Rs

req_with_slots(R, R-Slots) :- R = req(_,_,_,N), length(Slots, N). %Requisitios con los espacios. Y sera verdadero si N representa el numero de elementos N, slots.

classes(Classes) :-
        setof(C, S^N^T^class_subject_teacher_times(C,S,T,N), Classes). %Aqui hace lo mismo que en el setof de requirements pero con diferentes variables. Con Classes

teachers(Teachers) :-
        setof(T, C^S^N^class_subject_teacher_times(C,S,T,N), Teachers).%Lo mismo que arriba pero con Teachers

rooms(Rooms) :-
        findall(Room, room_alloc(Room,_C,_S,_Slot), Rooms0),  %Crea una lista de las instancias que room obtiene sucesivamente al retroceder sobre roomalloc y unifica el resultado con Rooms0. También tiene exito con una lista vacia si roomalloc no tiene soluciones
        sort(Rooms0, Rooms). %El sort lo que hace es ordenar la lista y convertirla en Room que es la solución.

requirements_variables(Rs, Vars) :-
        requirements(Rs), %Son los requisitos y es la funcion que tenemos definida previamente
        pairs_slots(Rs, Vars), %A esta funcion le pasamos los requisitos y crea la variable solucion Vars
        slots_per_week(SPW), %Son los intervalos de tiempo cada semana
        Max #= SPW - 1, %Max is SPW - 1
        Vars ins 0..Max, la funcion dice que las variables en la lista Vars son elementos del dominio 0..max
        maplist(constrain_subject, Rs), %Esto sera cierto si la función constrain_subject se aplica a todos los elementos coincidentes de la lista Rs.
        classes(Classes), %utiliza la funcion classes definida anteriormente
        teachers(Teachers),%lo mismo 
        rooms(Rooms),%lo mismo
        maplist(constrain_teacher(Rs), Teachers), %Aqui le esta aplicando la restriccon Rs a teachers. Y es verdadero si Rs se puede aplica con exito en los elementos coincidentes de Teacher.
        maplist(constrain_class(Rs), Classes), %Lo mismo pero con classes
        maplist(constrain_room(Rs), Rooms). %Lo mismo pero con rooms

slot_quotient(S, Q) :-
        slots_per_day(SPD),%Espacios por dia
        Q #= S // SPD. %Q is S //SPD lo que hace es unificar y a Q le da el valor de S entre los espacios por dia.


list_without_nths(Es0, Ws, Es) :-
        phrase(without_(Ws, 0, Es0), Es).

without_([], _, Es) --> seq(Es).
without_([W|Ws], Pos0, [E|Es]) -->
        { Pos #= Pos0 + 1,
          zcompare(R, W, Pos0) },
        without_at_pos0(R, E, [W|Ws], Ws1),
        without_(Ws1, Pos, Es).

without_at_pos0(=, _, [_|Ws], Ws) --> [].
without_at_pos0(>, E, Ws0, Ws0) --> [E].

%:- list_without_nths([a,b,c,d], [3], [a,b,c]).
%:- list_without_nths([a,b,c,d], [1,2], [a,d]).

slots_couplings(Slots, F-S) :-%Hueco en el que puedes meter asignaturas
        nth0(F, Slots, S1), %Sera verdadero cuando S1 es el elemento F de Slots
        nth0(S, Slots, S2),%Hace lo mismo pero con otro valor S y lo guarda en S2
        S2 #= S1 + 1. %El operador # actua o funciona como si fuera is. S2 is S1+1 Y lo que hace es darte el siguiente indice de donde se encuentra S1

constrain_subject(req(Class,Subj,_Teacher,_Num)-Slots) :-
        strictly_ascending(Slots), %Son espacios ascendentes en la lista Slots
        maplist(slot_quotient, Slots, Qs0), %maplist sera verdadero si slots_quotients se aplica con exito en todos los elementos coincidentes de las lista Slots y se guarda en Qs0
        findall(F-S, coupling(Class,Subj,F,S), Cs), /*El couplings dice que para la clase C las lecciones F y S de la asignatura Subj deben programarse contiguamente. Y el findall */
        maplist(slots_couplings(Slots), Cs), %Aqui le esta buscando una posicion de la lista slots a Cs. Y es verdadero si Slots se puede aplica con exito en los elementos coincidentes de Cs.
        pairs_values(Cs, Seconds0), %Elimina las claves de una lista de pares clave/valor
        sort(Seconds0, Seconds), %Ordena los segundos y lo guarda en seconds
        list_without_nths(Qs0, Seconds, Qs), %!!!!!
        strictly_ascending(Qs). %Qs estrictamente ascendente. Lista ascendente 


all_diff_from(Vs, F) :- maplist(#\=(F), Vs). %Sera verdadero si F se aplica con exito a Vs.
/* El all_diferent hace que no se repita.*/
constrain_class(Rs, Class) :-
        tfilter(class_req(Class), Rs, Sub),
        pairs_slots(Sub, Vs),
        all_different(Vs), %Aqui lo que hace es que no se puede dar mas de una asignatura a la vez en la misma clase
        findall(S, class_freeslot(Class,S), Frees), %Se le da una plantilla de las instancias que S obtiene sucesivamente al retroceder sobre classfreesloot y unifica el resultado con Frees
        maplist(all_diff_from(Vs), Frees). %Unifica los valores diferentes Vs con frees.


constrain_teacher(Rs, Teacher) :- %Utiliza las mismas que el anterior
        tfilter(teacher_req(Teacher), Rs, Sub),
        pairs_slots(Sub, Vs),
        all_different(Vs), %Aqui por ejemplo el all_diferent hace que el profesor no pueda dar mas de una asignatura a la vez
        findall(F, teacher_freeday(Teacher, F), Fs), %Se le da una plantilla de las instancias que F obtiene sucesivamente al retroceder sobre teacher_freedays y unifica el resultado con Frees. Basicamente compara los dias libres de un profesor con los dias libres y unifica con Fs
        maplist(slot_quotient, Vs, Qs), %Sera verdadero si slot_quotient se aplica con exito en todos los elementos coincidentes de la lista vs y unifica con Qs
        maplist(all_diff_from(Qs), Fs).%Unifica los valores diferentes Qs con frees.

sameroom_var(Reqs, r(Class,Subject,Lesson), Var) :- 
        memberchk(req(Class,Subject,_Teacher,_Num)-Slots, Reqs), %Es verdadero cuando req es un elemento de reqs
        nth0(Lesson, Slots, Var).%Verdadero cuando Var es el lesson elemento de la lista slots
/* room alloc hace que el aula Room se utilice para la clase Class y la leccion Less de la asignatura Subj*/
constrain_room(Reqs, Room) :-
        findall(r(Class,Subj,Less), room_alloc(Room,Class,Subj,Less), RReqs),%r son la class, asignatura y leccion. Crea una lista de las instancias que la funcion R obtiene sucesivamente al retroceder sobre room_alloc y unifica el resultado con RReqs.Basicamente obtiene la sala al comparar las instancias de R.
        maplist(sameroom_var(Reqs), RReqs, Roomvars),%Es verdadero si sameroomvar(reqs) se aplica con exito en todos los elementos coincidentes de la lista RReqs y unifica con Roomsvar.
        all_different(Roomvars). %Aqui lo que hace es que todas las habitaciones tienen que ser diferentes


strictly_ascending(Ls) :- chain(#<, Ls). %Sera cierto si sus argumentos son una lista de enteros ascendentes.

class_req(C0, req(C1,_S,_T,_N)-_, T) :- =(C0, C1, T).

teacher_req(T0, req(_C,_S,T1,_N)-_, T) :- =(T0,T1,T).

pairs_slots(Ps, Vs) :-
        pairs_values(Ps, Vs0), %Elimina las claves de una lista de pares clave/valor
        append(Vs0, Vs). %Concatena Vs0 con Vs

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Relacionar los profesores y las clases con la lista de días.
   Cada día es una lista de asignaturas (para las clases), y una lista de
   términos de clase/Asignatura (para los profesores). El predicado días_variables/2
   produce una lista de días con las dimensiones adecuadas, donde cada elemento
   es una variable libre.
   Utilizamos el átomo 'free' para denotar un espacio libre, y los términos compuestos
   class_subject(C, S) y Asignatura(S) para denotar las clases/asignatura.
   Esta limpia distinción simbólica se utiliza para apoyar a las asignaturas
   que se denominan "libres", y para mejorar la generalidad y la eficiencia.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

days_variables(Days, Vs) :- 
        slots_per_week(SPW), %Espacio por semana.
        slots_per_day(SPD), %Espacio por dia
        NumDays #= SPW // SPD, %Numero de dias es espacio por semana entre espacio por dia y nos da los dias.
        length(Days, NumDays), %longitud de dias que es el numero de dias
        length(Day, SPD), %longitud de dia que son los espacios que hay por dia
        maplist(same_length(Day), Days), %Le esta aplicando la misma longitud dia a los dias
        append(Days, Vs). %Concatena dias con una lista de longitudes 

class_days(Rs, Class, Days) :-
        days_variables(Days, Vs), %Lista de dias y longitud del dia.
        tfilter(class_req(Class), Rs, Sub),
        foldl(v(Sub), Vs, 0, _). %Dobla una lista de longitud n cabeza a cola, utilizando columnas de m elementos de la lista como argumentos para v(sub).

v(Rs, V, N0, N) :-
        (   member(req(_,Subject,_,_)-Times, Rs), %Verdadero si req -times es un miembro de Rs. Aqui solo es la asignatura.
            member(N0, Times) -> V = subject(Subject) %Verdadero si N0 es un miembro de Times. V quiere decir la asignatura de la funcion subject
        ;   V = free
        ),
        N #= N0 + 1.

teacher_days(Rs, Teacher, Days) :-
        days_variables(Days, Vs),%Lista de dias y longitud del dia.
        tfilter(teacher_req(Teacher), Rs, Sub),
        foldl(v_teacher(Sub), Vs, 0, _).Dobla una lista de longitud n cabeza a cola, utilizando columnas de m elementos de la lista como argumentos para v_teacher(sub).

v_teacher(Rs, V, N0, N) :-
        (   member(req(C,Subj,_,_)-Times, Rs),%Verdadero si req -times es un miembro de Rs. Aqui es la asignatura y la clase
            member(N0, Times) -> V = class_subject(C, Subj) Verdadero si N0 es un miembro de Times. V es la asignatura que se imparte en la clase C.
        ;   V = free
        ),
        N #= N0 + 1.

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  En este bloque se muestra el codigo que funciona para escribir por pantalla los objetos.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

print_classes(Rs) :-
        classes(Cs),
        phrase_to_stream(format_classes(Cs, Rs), user_output).

format_classes([], _) --> [].
format_classes([Class|Classes], Rs) -->
        { class_days(Rs, Class, Days0),
          transpose(Days0, Days) },
        format_("Class: ~w~2n", [Class]),
        weekdays_header,
        align_rows(Days),
        format_classes(Classes, Rs).

align_rows([]) --> "\n\n\n".
align_rows([R|Rs]) -->
        align_row(R),
        "\n",
        align_rows(Rs).

align_row([]) --> [].
align_row([R|Rs]) -->
        align_(R),
        align_row(Rs).

align_(free)               --> align_(verbatim('')).
align_(class_subject(C,S)) --> align_(verbatim(C/S)).
align_(subject(S))         --> align_(verbatim(S)).
align_(verbatim(Element))  --> format_("~t~w~t~8+", [Element]).

print_teachers(Rs) :-
        teachers(Ts),
        phrase_to_stream(format_teachers(Ts, Rs), user_output).

format_teachers([], _) --> [].
format_teachers([T|Ts], Rs) -->
        { teacher_days(Rs, T, Days0),
          transpose(Days0, Days) },
        format_("Teacher: ~w~2n", [T]),
        weekdays_header,
        align_rows(Days),
        format_teachers(Ts, Rs).

weekdays_header -->
        { maplist(with_verbatim,
                  ['Mon','Tue','Wed','Thu','Fri'],
                  Vs) },
        align_row(Vs),
        format_("~n~`=t~40|~n", []).

with_verbatim(T, verbatim(T)).

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   ?- consult('reqs_example.pl'),
      requirements_variables(Rs, Vs),
      labeling([ff], Vs),
      print_classes(Rs).
   %@ Class: 1a
   %@
   %@   Mon     Tue     Wed     Thu     Fri
   %@ ========================================
   %@   mat     mat     mat     mat     mat
   %@   eng     eng     eng
   %@    h       h
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */